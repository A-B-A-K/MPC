addpath(fullfile('..', 'src'));

%close all
%clear all
%clc


% Ts = 1/20;
% rocket = Rocket(Ts);
% 
% H = 5;     % Horizon length in seconds
% nmpc = NmpcControl (rocket, H);
% 
% % MPC reference with default maximum roll = 15 deg
% ref = @(t_,x_) ref_TVC(t_);
% 
% % MPC reference with default maximum roll = 50 deg
% %roll_max = deg2rad(50);
% %ref = @(t_,x_) ref_TVC(t_, roll_max);
% 
% % Evaluate once and plot optimal open-loop trajectory,
% % pad last input to get consistent size with time and state
% x0 = [0;0;0;0;0;40;0;0;0;3;3;3];
% [u, T_opt, X_opt, U_opt] = nmpc.get_u(x0, ref(1)');
% U_opt(:,end+1) = nan;
% ph = rocket.plotvis(T_opt, X_opt, U_opt, ref(1)');
% 
% Tf = 30;
% [T, X, U, Ref] = rocket.simulate(x0, Tf, @nmpc.get_u, ref);






Ts = 1/20;
rocket = Rocket(Ts);
H = 2; % Horizon length in seconds
nmpc = NmpcControl(rocket, H);

%% OPEN-LOOP

x0 = zeros(12,1);
ref = -ones(4,1);
% Evaluate once and plot optimal openâˆ’loop trajectory,
% pad last input to get consistent size with time and state
[u, T_opt, X_opt, U_opt] = nmpc.get_u(x0, ref);
U_opt(:,end+1) = nan;
ph = rocket.plotvis(T_opt, X_opt, U_opt, ref);
ph.fig.Name = 'Open-loop nonlinear MPC.';


%% CLOSED-LOOP
% MPC reference with default maximum roll = 15 deg
ref = @(t_, x_) ref_TVC(t_);
% % MPC reference with specified maximum roll = 50 deg
% roll_max = deg2rad(50);
% ref = @(t_, x_) ref_TVC(t_, rollmax);

x0 = zeros(12,1);

%Closed loop simulation;
Tf = 30;
rocket.anim_rate = 1;
[T, X, U, Ref] = rocket.simulate(x0, Tf, @nmpc.get_u, ref);
ph = rocket.plotvis(T, X , U , Ref);